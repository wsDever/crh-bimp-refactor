"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("../polyfills/tslib.js");
var nb_component_core_js_1 = require("../nb-component.core.js");
var Affix = function () { function e() { var e = this; this.zIndex = 2, this.handleFix = function () { var t = e.el.getBoundingClientRect().top, n = e.target.getBoundingClientRect().top; e.offset >= 0 && (e.fixed = t - n <= e.offset); }; } return e.prototype.getStartFixedScrollTop = function () { return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (e) { return [2, this.startFixedScrollTop]; }); }); }, e.prototype.onCurrentPageChange = function (e) { e && (this.startFixedScrollTop = this.target.scrollTop), this.change.emit({ isFixed: e }); }, e.prototype.isFixed = function () { return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (e) { return [2, this.fixed]; }); }); }, Object.defineProperty(e.prototype, "fixedTop", { get: function () { return this.target ? this.target.getBoundingClientRect().top + this.offset : this.el.getBoundingClientRect().top; }, enumerable: !0, configurable: !0 }), e.prototype.componentDidLoad = function () { var e = this; try {
    setTimeout(function () { e.target = e.relativeSelector ? document.querySelector(e.relativeSelector) : document.body, e.target.addEventListener("scroll", e.handleFix, !1); }, 10);
}
catch (e) {
    throw new TypeError(e);
} }, e.prototype.componentDidUnload = function () { this.target && this.target.removeEventListener("scroll", this.handleFix, !1); }, e.prototype.render = function () { return nb_component_core_js_1.h("div", { style: { position: this.fixed ? "fixed" : "relative", top: this.fixed ? this.fixedTop + "px" : "auto", zIndex: String(this.zIndex) } }, nb_component_core_js_1.h("slot", null)); }, Object.defineProperty(e, "is", { get: function () { return "nb-affix"; }, enumerable: !0, configurable: !0 }), Object.defineProperty(e, "encapsulation", { get: function () { return "shadow"; }, enumerable: !0, configurable: !0 }), Object.defineProperty(e, "properties", { get: function () { return { el: { elementRef: !0 }, fixed: { state: !0, watchCallbacks: ["onCurrentPageChange"] }, getStartFixedScrollTop: { method: !0 }, isFixed: { method: !0 }, offset: { type: Number, attr: "offset" }, relativeSelector: { type: String, attr: "relative-selector" }, zIndex: { type: Number, attr: "z-index" } }; }, enumerable: !0, configurable: !0 }), Object.defineProperty(e, "events", { get: function () { return [{ name: "change", method: "change", bubbles: !0, cancelable: !0, composed: !0 }]; }, enumerable: !0, configurable: !0 }), e; }();
exports.NbAffix = Affix;
